@layout('layout/master')

@section('content')
  <h2 class="title">{{ title }}</h2>
  <div class="control control-items_sb">
    <div class="control__btns">
      @can('createDefect')
        @buttons.add({ href: 'defects.create' })
          Добавить
        @end
      @endcan
    </div>
    <div class="defect__filters">
      @dropdown.dropdown({
        classDropdownMenu: 'dropdown__menu-menu_bottom_right',
        dropdownData: [
          { name: 'Все', path: 'defects.index' },
          ...typesDefectsToSort
        ],
      })
        <img src="{{ asset('assets/images/icons/sort.svg') }}" class="dropdown-icon dropdown-icon-size_15">
        {{ typeDefect?.type_defect ? typeDefect.type_defect : 'Все' }}
        <img src="{{ asset('assets/images/icons/arrow-down.svg') }}" class="dropdown-icon">
      @end
    </div>
  </div>
  <div class="defect__content">
    {{--  {{inspect(defects[0]?.defect_type)}}  --}}
    {{--  {{inspect(defect.defect_type ?? 'false')}}  --}}
    <hr>
    {{--  {{inspect(typesFilter)}}  --}}
    @if(defects.length)
      <div class="cards defect__cards">
        @each(defect in defects)
          @card.card({
            optionalClasses: defect.elimination_date !== null ? 'card-completed' : defect.importance === true ? 'card-danger' : ''
          })
            @slot('cardHeader')
              <div class="card__header-content">
                @card.cardGroup({ optionalClasses: 'card__group-cg_15'})
                  @if(defect?.defect_type)
                    <div class="card__badge">
                      <span class="card__text">{{ defect.defect_type.type_defect }}</span>
                    </div>
                  @endif
                  @if(defect?.substation)
                    <a href="{{ route('substations.show', {id: defect.substation.id}) }}" class="active-link">
                      {{ defect.substation.name }}
                      <img src="{{ asset('assets/images/icons/link.svg') }}">
                    </a>
                  @endif
                  @!card.cardSpan({ text: defect.accession.name, optionalClasses: 'card__text' })
                  @!card.cardSpan({ text: `Проверок: ${defect.countIntermediateChecks ?? defect.intermediate_checks.length}`, optionalClasses: 'card__text' })
                @end
                @card.cardGroup()
                  @!card.cardSpan({ text: defect.user.shortUserName, optionalClasses: 'card__text' })
                @end
              </div>
            @end
            @slot('cardBody')
              <div class="card__body-content">
                <p class="card__text card__text-fs_20">
                  {{ defect.excerptText }}
                </p>
                <div class="card__data-info">
                  @card.cardGroup()
                    @!card.cardSpan({ text: 'Дата добавления:', optionalClasses: 'card__text card__text-bold' })
                    @!card.cardSpan({ text: dateFormat(defect.created_at), optionalClasses: 'card__text' })
                  @end
                  @card.cardGroup()
                    @!card.cardSpan({ text: 'Срок устранения:', optionalClasses: 'card__text card__text-bold' })
                    @!card.cardSpan({ text: dateFormat(defect.term_elimination), optionalClasses: 'card__text' })
                  @end
                  @card.cardGroup()
                    @!card.cardSpan({ text: 'Дата устранения:', optionalClasses: 'card__text card__text-bold' })
                    @!card.cardSpan({
                      text: defect.elimination_date === null ? 'Не устранен' : dateFormat(defect.elimination_date),
                      optionalClasses: defect.elimination_date === null ? 'card__text card__text-red' :  'card__text'
                    })
                  @end
                </div>
              </div>
            @end
            @slot('cardFooter')
              <div class="card__footer-content">
                @card.cardGroup()
                  @buttons.base({
                    href: 'defects.show',
                    params: {id: defect.id},
                    className: 'btn-small btn-color_blue ',
                  })
                    Подробнее...
                  @end
                @end
                @card.cardGroup()
                  @if(!await bouncer.denies('editDefect', defect) || !await bouncer.denies('deleteDefect', defect) || !await bouncer.denies('editDefectDeadline', defect))
                    @dropdown.dropdown({
                      classBtnDropdown: 'btn-dropdown-icon',
                      dropdownData: [
                        { name: 'Увеличить срок', access: 'editDefectDeadline', data: defect, path: 'defects.edit.deadline', params: { id: defect.id }, icon: 'calendar-1.svg' },
                        { name: 'Редактировать', access: 'editDefect', data: defect, path: 'defects.edit', params: { id: defect.id }, icon: 'edit.svg' },
                        { name: 'Удалить', access: 'deleteDefect', data: defect, path: 'defects.destroy', params: { id: defect.id }, icon: 'delete.svg' },
                      ],
                    })
                      <img src="{{ asset('assets/images/icons/menu.svg') }}">
                    @end
                  @endif
                @end
              </div>
            @end
          @end
        @endeach
      </div>
    @else
      @!notification.nocontent({ messageNoData: 'Пока нет добавленых дефектов.' })
    @endif
    <hr>
  </div>
  @!component('components/pagination', {
    pagination: defects,
  })
@endsection
