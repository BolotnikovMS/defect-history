@layout('layout/master')

@section('content')
  <h2 class="title">{{ title }}</h2>
    <div class="control control-items_sb">
      @can('SubstationPolicy.viewAttachment')
        <div class="control__btns">
          @buttons.base({
            href: 'substations.show.attachments',
            params: { idSubstation: substation.id },
            className: 'btn-color_blue btn-color_blue-transparent',
          })
            Присоединения
          @end
        </div>
      @end
      @!component('pages/substation/components/filters/filtersSubstation', {
        substation,
        typesDefects,
        filters,
      })
    </div>
  <div class="substations__content">
    <hr>
    @if(substation[filters.defectsClass].length)
      <div class="cards defect__cards">
        @each(defect in substation[filters.defectsClass])
          @card.card({
            optionalClasses: defect.elimination_date !== null ? 'card-completed' : new Date(defect.term_elimination) < new Date() ?
            'card-danger' : ''
          })
            @slot('cardHeader')
              <div class="card__header-content">
                @card.cardGroup({ optionalClasses: 'card__group-cg_15'})
                  @if(filters.defectsClass === 'defectsOs')
                    @if(defect.defect_group.importance)
                      @badge.badge({
                        badgeContentOptionalClasses: 'badge__content-pad_48 badge__content-bgc_red badge__content-flx',
                        component: true,
                      })
                        @!icons.important()
                      @end
                    @end
                  @elseif(filters.defectsClass === 'defects')
                    @if(defect.importance)
                      @badge.badge({
                        badgeContentOptionalClasses: 'badge__content-pad_48 badge__content-bgc_red badge__content-flx',
                        component: true,
                      })
                        @!icons.important()
                      @end
                    @end
                  @end
                  @if(defect.defect_type)
                    @!badge.badge({
                      badgeContentOptionalClasses: 'badge__content-pad_48 badge__content-bgc_lb',
                      data: defect.defect_type.type_defect
                    })
                  @end
                  @if(defect.work_planning?.length && defect.result === null)
                    @!badge.badge({
                      badgeContentOptionalClasses: 'badge__content-pad_48 badge__content-bgc_org',
                      data: 'В работе'
                    })
                  @endif
                  @!card.cardSpan({ text: defect.accession?.name || defect.accession_substations, optionalClasses: 'card__text' })
                  @if(defect.countIntermediateChecks)
                    @!card.cardSpan({ text: `Проверок: ${defect.countIntermediateChecks ?? defect.intermediate_checks?.length}`, optionalClasses: 'card__text' })
                  @endif
                @end
                @card.cardGroup()
                  @!card.cardSpan({ text: defect.user.shortUserName, optionalClasses: 'card__text' })
                @end
              </div>
            @end
            @slot('cardBody')
              <div class="card__body-content">
                <p class="card__text card__text-fs_20">
                  {{ defect.excerptText }}
                </p>
                <div class="card__data-info">
                  @card.cardGroup()
                    @!card.cardSpan({ text: 'Дата добавления:', optionalClasses: 'card__text card__text-bold' })
                    @!card.cardSpan({ text: dateFormat(defect.created_at), optionalClasses: 'card__text' })
                  @end
                  @card.cardGroup()
                    @!card.cardSpan({ text: 'Срок устранения:', optionalClasses: 'card__text card__text-bold' })
                    @!card.cardSpan({ text: dateFormat(defect.term_elimination), optionalClasses: 'card__text' })
                  @end
                  @card.cardGroup()
                    @!card.cardSpan({ text: 'Дата устранения:', optionalClasses: 'card__text card__text-bold' })
                    @!card.cardSpan({
                      text: defect.elimination_date === null ? 'Не устранен' : dateFormat(defect.elimination_date),
                      optionalClasses: defect.elimination_date === null ? 'card__text card__text-red' :  'card__text'
                    })
                  @end
                </div>
              </div>
            @end
            @slot('cardFooter')
              <div class="card__footer-content">
                @if(filters.defectsClass === 'defects')
                  @card.cardGroup()
                    @buttons.base({
                      href: 'defects.show',
                      params: {id: defect.id},
                      className: 'btn-small btn-color_blue ',
                    })
                      Подробнее...
                    @end
                  @end
                  @card.cardGroup()
                    @if(!await bouncer.with('DefectTMPolicy').denies('update', defect) || !await bouncer.with('DefectTMPolicy').denies('delete', defect) || !await bouncer.with('DefectTMPolicy').denies('updateDeadline', defect))
                      @dropdown.dropdown({
                        classBtnDropdown: 'btn-dropdown-icon',
                        dropdownData: [
                          { name: 'Изменить срок', access: 'DefectTMPolicy.updateDeadline', data: defect, path: 'defects.edit.deadline', params: { id: defect.id }, icon: 'calendarOne' },
                          { name: 'Редактировать', access: 'DefectTMPolicy.update', data: defect, path: 'defects.edit', params: { id: defect.id }, icon: 'edit' },
                          { name: 'Удалить', access: 'DefectTMPolicy.delete', data: defect, path: 'defects.destroy', params: { id: defect.id }, icon: 'delete' },
                        ],
                      })
                        @!icons.menu()
                      @end
                    @endif
                  @end
                @else
                  @card.cardGroup()
                    @buttons.base({
                      href: 'defects-os.show',
                      params: {id: defect.id},
                      className: 'btn-small btn-color_blue ',
                    })
                      Подробнее...
                    @end
                  @end
                  @card.cardGroup()
                    @if(!await bouncer.with('DefectOSPolicy').denies('update', defect) || !await bouncer.with('DefectOSPolicy').denies('delete', defect))
                      @dropdown.dropdown({
                        classBtnDropdown: 'btn-dropdown-icon',
                        dropdownData: [
                          { name: 'Редактировать', access: 'DefectOSPolicy.update', data: defect, path: 'defects-os.edit', params: { id: defect.id }, icon: 'edit' },
                          { name: 'Удалить', access: 'DefectOSPolicy.delete', data: defect, path: 'defects-os.destroy', params: { id: defect.id }, icon: 'delete' },
                        ],
                      })
                        @!icons.menu()
                      @end
                    @endif
                  @end
                @endif
              </div>
            @end
          @end
        @endeach
      </div>
    @else
      <div class="no-content">
        <p>Пока нет добавленных дефектов.</p>
      </div>
    @endif
    <hr>
  </div>
@endsection
